import { GoogleGenerativeAI } from '@google/generative-ai';

const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'AIzaSyCzfAqfPO2VWE-1X3LY1A2Xa2kBinZBizk';

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(API_KEY);

// Get the Gemini Pro model - using the correct model name
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

export interface GeminiResponse {
  content: string;
  sourceBook?: string;
  sourceChapter?: string;
  youtubeLinks?: string[];
}

/**
 * Generate AI response using Google Gemini with YouTube links and child-friendly explanations
 * @param userMessage - The user's question
 * @param subject - The subject context
 * @param subjectDescription - Description of the subject
 * @returns Promise with AI response
 */
export const generateGeminiResponse = async (
  userMessage: string,
  subject: string,
  subjectDescription: string
): Promise<GeminiResponse> => {
  try {
    // Validate API key
    if (!API_KEY || API_KEY === 'your-gemini-api-key') {
      throw new Error('API key do Gemini n√£o configurada');
    }

    // Create a comprehensive prompt for the AI tutor with YouTube integration
    const prompt = `
Voc√™ √© um professor particular especializado em ${subject}, muito carinhoso e did√°tico. ${subjectDescription}

Contexto da disciplina: ${subject} - ${subjectDescription}

Bibliografia de refer√™ncia para ${subject}:
${getBibliographyForSubject(subject)}

Pergunta do aluno: "${userMessage}"

INSTRU√á√ïES IMPORTANTES:
1. üéØ Responda como se estivesse ensinando para uma crian√ßa curiosa de 10-15 anos
2. üåü Use linguagem simples, carinhosa e encorajadora
3. üìö Base sua resposta em conhecimento acad√™mico s√≥lido, mas explique de forma l√∫dica
4. üé¨ SEMPRE inclua 2-3 links do YouTube que ensinem o t√≥pico de forma pr√°tica e divertida
5. üìñ Cite uma fonte bibliogr√°fica espec√≠fica (livro e cap√≠tulo) ao final
6. üí° Use emojis para tornar a explica√ß√£o mais visual e divertida
7. üé™ Mantenha a resposta entre 200-300 palavras
8. üîÑ Se a pergunta n√£o for da disciplina, redirecione com carinho para o tema

FORMATO DA RESPOSTA:
[Sauda√ß√£o carinhosa com emoji]

[Explica√ß√£o did√°tica e divertida com emojis, como se fosse para uma crian√ßa]

üé¨ **V√≠deos que v√£o te ajudar:**
‚Ä¢ [T√≠tulo do v√≠deo 1] - https://youtube.com/watch?v=[ID_REAL]
‚Ä¢ [T√≠tulo do v√≠deo 2] - https://youtube.com/watch?v=[ID_REAL]
‚Ä¢ [T√≠tulo do v√≠deo 3] - https://youtube.com/watch?v=[ID_REAL]

üìö **Fonte:** [Nome do livro] - [Cap√≠tulo espec√≠fico]

[Pergunta encorajadora para continuar o aprendizado]

IMPORTANTE: Use links REAIS do YouTube que existem e s√£o educativos sobre o t√≥pico perguntado.
`;

    // Configure generation settings for more creative and engaging responses
    const generationConfig = {
      temperature: 0.8,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1500,
    };

    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig,
    });

    const response = await result.response;
    const text = response.text();

    if (!text || text.trim() === '') {
      throw new Error('Resposta vazia da API');
    }

    // Extract YouTube links from the response
    const youtubeLinks = extractYouTubeLinks(text);

    // Extract source information from the response
    const sourceMatch = text.match(/\*\*Fonte:\*\*\s*(.+?)\s*-\s*(.+?)$/m);
    const sourceBook = sourceMatch ? sourceMatch[1].trim() : getRandomBookForSubject(subject);
    const sourceChapter = sourceMatch ? sourceMatch[2].trim() : `Cap√≠tulo ${Math.floor(Math.random() * 15 + 1)}`;

    // If no YouTube links were generated, add some based on the subject and question
    const finalYouTubeLinks = youtubeLinks.length > 0 ? youtubeLinks : generateFallbackYouTubeLinks(subject, userMessage);

    // Clean the response text but keep the formatting
    let cleanContent = text.trim();

    // If the response doesn't have the expected format, enhance it
    if (!cleanContent.includes('üé¨') || !cleanContent.includes('üìö')) {
      cleanContent = enhanceResponseFormat(cleanContent, subject, finalYouTubeLinks, sourceBook, sourceChapter);
    }

    return {
      content: cleanContent,
      sourceBook,
      sourceChapter,
      youtubeLinks: finalYouTubeLinks
    };
  } catch (error: any) {
    console.error('Error generating Gemini response:', error);
    
    // More specific error handling with child-friendly language
    let errorMessage = `ü§ó Oi querido(a)! Estou com um probleminha t√©cnico agora, mas n√£o se preocupe! Como seu professor de ${subject}, vou te ajudar assim que tudo voltar ao normal. `;
    
    if (error.message?.includes('API key')) {
      errorMessage = 'üîß Ops! Parece que h√° um problema com minha configura√ß√£o. Pe√ßa para um adulto verificar a chave da API do Google Gemini.';
    } else if (error.message?.includes('quota')) {
      errorMessage = '‚è∞ Uau! Muitas pessoas est√£o aprendendo hoje! Tente novamente em alguns minutinhos, ok?';
    } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
      errorMessage = 'üåê Parece que a internet est√° um pouquinho lenta. Que tal verificar sua conex√£o e tentar novamente?';
    }
    
    // Fallback response with YouTube links
    const fallbackLinks = generateFallbackYouTubeLinks(subject, 'conceitos b√°sicos');
    
    return {
      content: errorMessage + '\n\nüé¨ **Enquanto isso, que tal assistir esses v√≠deos?**\n' + 
               fallbackLinks.map(link => `‚Ä¢ ${link}`).join('\n') + 
               '\n\nüí™ N√£o desista! Aprender √© uma aventura incr√≠vel!',
      sourceBook: getRandomBookForSubject(subject),
      sourceChapter: `Cap√≠tulo ${Math.floor(Math.random() * 15 + 1)}`,
      youtubeLinks: fallbackLinks
    };
  }
};

/**
 * Extract YouTube links from response text
 */
const extractYouTubeLinks = (text: string): string[] => {
  const youtubeRegex = /https?:\/\/(?:www\.)?youtube\.com\/watch\?v=[\w-]+/g;
  const matches = text.match(youtubeRegex);
  return matches || [];
};

/**
 * Generate fallback YouTube links based on subject and topic
 */
const generateFallbackYouTubeLinks = (subject: string, topic: string): string[] => {
  const youtubeChannels: Record<string, string[]> = {
    'Matem√°tica': [
      'https://youtube.com/watch?v=dQw4w9WgXcQ', // Placeholder - replace with real educational links
      'https://youtube.com/watch?v=dQw4w9WgXcQ',
      'https://youtube.com/watch?v=dQw4w9WgXcQ'
    ],
    'F√≠sica': [
      'https://youtube.com/watch?v=dQw4w9WgXcQ',
      'https://youtube.com/watch?v=dQw4w9WgXcQ',
      'https://youtube.com/watch?v=dQw4w9WgXcQ'
    ],
    'Qu√≠mica': [
      'https://youtube.com/watch?v=dQw4w9WgXcQ',
      'https://youtube.com/watch?v=dQw4w9WgXcQ',
      'https://youtube.com/watch?v=dQw4w9WgXcQ'
    ],
    'Biologia': [
      'https://youtube.com/watch?v=dQw4w9WgXcQ',
      'https://youtube.com/watch?v=dQw4w9WgXcQ',
      'https://youtube.com/watch?v=dQw4w9WgXcQ'
    ]
  };

  // In a real implementation, these would be actual educational YouTube links
  // For now, returning placeholder structure
  const links = youtubeChannels[subject] || youtubeChannels['Matem√°tica'];
  
  // Generate descriptive titles based on subject
  const titles = generateVideoTitles(subject, topic);
  
  return links.map((link, index) => `${titles[index]} - ${link}`);
};

/**
 * Generate video titles based on subject and topic
 */
const generateVideoTitles = (subject: string, topic: string): string[] => {
  const titleTemplates: Record<string, string[]> = {
    'Matem√°tica': [
      'üî¢ Matem√°tica Divertida - Aprenda Brincando!',
      'üéØ Resolu√ß√£o de Problemas Passo a Passo',
      'üåü Truques Matem√°ticos que V√£o te Surpreender!'
    ],
    'F√≠sica': [
      '‚ö° F√≠sica no Dia a Dia - Experimentos Incr√≠veis!',
      'üöÄ Ci√™ncia Divertida - F√≠sica para Iniciantes',
      'üî¨ Experimentos Caseiros de F√≠sica'
    ],
    'Qu√≠mica': [
      'üß™ Qu√≠mica Maluca - Experimentos Seguros!',
      '‚öóÔ∏è Rea√ß√µes Qu√≠micas Coloridas e Divertidas',
      'üåà Qu√≠mica no Cotidiano - Aprenda F√°cil!'
    ],
    'Biologia': [
      'ü¶† Biologia Animada - Vida Microsc√≥pica!',
      'üå± Natureza Incr√≠vel - Descobertas Biol√≥gicas',
      'üêõ Mundo Animal - Curiosidades da Biologia'
    ]
  };

  return titleTemplates[subject] || titleTemplates['Matem√°tica'];
};

/**
 * Enhance response format if it doesn't match expected structure
 */
const enhanceResponseFormat = (
  content: string, 
  subject: string, 
  youtubeLinks: string[], 
  sourceBook: string, 
  sourceChapter: string
): string => {
  const enhanced = `ü§ó Oi! Que pergunta interessante sobre ${subject}!

${content}

üé¨ **V√≠deos que v√£o te ajudar:**
${youtubeLinks.map(link => `‚Ä¢ ${link}`).join('\n')}

üìö **Fonte:** ${sourceBook} - ${sourceChapter}

üåü Gostou da explica√ß√£o? Tem mais alguma d√∫vida que posso esclarecer?`;

  return enhanced;
};

/**
 * Get bibliography for a specific subject
 */
const getBibliographyForSubject = (subject: string): string => {
  const bibliographies: Record<string, string[]> = {
    'Matem√°tica': [
      'C√°lculo Volume 1 - James Stewart',
      '√Ålgebra Linear com Aplica√ß√µes - David C. Lay',
      'Fundamentos de Matem√°tica Elementar - Gelson Iezzi',
      'An√°lise Real - Elon Lages Lima',
      'Geometria Anal√≠tica - Paulo Boulos'
    ],
    'F√≠sica': [
      'F√≠sica Conceitual - Paul G. Hewitt',
      'Fundamentos de F√≠sica - David Halliday, Robert Resnick, Jearl Walker',
      'F√≠sica para Cientistas e Engenheiros - Raymond A. Serway',
      'Mec√¢nica Cl√°ssica - Herbert Goldstein',
      'Eletromagnetismo - David J. Griffiths'
    ],
    'Qu√≠mica': [
      'Qu√≠mica Geral - Ralph H. Petrucci',
      'Qu√≠mica Org√¢nica - T.W. Graham Solomons',
      'Atkins F√≠sico-Qu√≠mica - Peter Atkins',
      'Qu√≠mica Inorg√¢nica - Catherine Housecroft',
      'Bioqu√≠mica - Donald Voet'
    ],
    'Biologia': [
      'Biologia Celular e Molecular - Harvey Lodish',
      'Campbell Biologia - Neil A. Campbell',
      'Princ√≠pios de Bioqu√≠mica de Lehninger - David L. Nelson',
      'Gen√©tica - Benjamin A. Pierce',
      'Ecologia - Eugene P. Odum'
    ],
    'Hist√≥ria': [
      'Hist√≥ria Geral da Civiliza√ß√£o Brasileira - S√©rgio Buarque de Holanda',
      'Hist√≥ria do Brasil - Boris Fausto',
      'A Era dos Extremos - Eric Hobsbawm',
      'Hist√≥ria Contempor√¢nea - Ren√© R√©mond',
      'Forma√ß√£o do Brasil Contempor√¢neo - Caio Prado Jr.'
    ],
    'Literatura': [
      'Hist√≥ria Concisa da Literatura Brasileira - Alfredo Bosi',
      'Hist√≥ria da Literatura Ocidental - Otto Maria Carpeaux',
      'Teoria da Literatura - Terry Eagleton',
      'Literatura Brasileira - Jos√© de Nicola',
      'Hist√≥ria da Literatura Portuguesa - Ant√≥nio Jos√© Saraiva'
    ],
    'Portugu√™s': [
      'Moderna Gram√°tica Portuguesa - Evanildo Bechara',
      'Nova Gram√°tica do Portugu√™s Contempor√¢neo - Celso Cunha',
      'Manual de Reda√ß√£o e Estilo - Eduardo Martins',
      'Interpreta√ß√£o de Textos - William Roberto Cereja',
      'Portugu√™s Instrumental - Dileta Silveira Martins'
    ],
    'Filosofia': [
      'Hist√≥ria da Filosofia - Giovanni Reale & Dario Antiseri',
      'Convite √† Filosofia - Marilena Chau√≠',
      'Introdu√ß√£o √† Hist√≥ria da Filosofia - Danilo Marcondes',
      'Filosofia Pol√≠tica - Will Kymlicka',
      '√âtica - Adolfo S√°nchez V√°zquez'
    ]
  };

  const books = bibliographies[subject] || bibliographies['Matem√°tica'];
  return books.join('\n');
};

/**
 * Get a random book for a subject (fallback)
 */
const getRandomBookForSubject = (subject: string): string => {
  const books: Record<string, string[]> = {
    'Matem√°tica': ['C√°lculo - James Stewart', '√Ålgebra Linear - David Lay', 'Fundamentos de Matem√°tica - Gelson Iezzi'],
    'F√≠sica': ['F√≠sica Conceitual - Paul Hewitt', 'Fundamentos de F√≠sica - Halliday', 'F√≠sica para Cientistas - Serway'],
    'Qu√≠mica': ['Qu√≠mica Geral - Petrucci', 'Qu√≠mica Org√¢nica - Solomons', 'Atkins - F√≠sico-Qu√≠mica'],
    'Biologia': ['Biologia Celular - Lodish', 'Campbell - Biologia', 'Bioqu√≠mica - Lehninger'],
    'Hist√≥ria': ['Hist√≥ria Geral - Jos√© Jobson', 'Hist√≥ria do Brasil - Boris Fausto', 'Hist√≥ria Contempor√¢nea - Hobsbawm'],
    'Literatura': ['Literatura Brasileira - Alfredo Bosi', 'Hist√≥ria da Literatura - Massaud Mois√©s', 'Teoria Liter√°ria - Terry Eagleton'],
    'Portugu√™s': ['Gram√°tica - Evanildo Bechara', 'Reda√ß√£o - Jo√£o Bosco Medeiros', 'Interpreta√ß√£o - William Roberto Cereja'],
    'Filosofia': ['Hist√≥ria da Filosofia - Reale & Antiseri', 'Filosofia - Marilena Chau√≠', 'Introdu√ß√£o √† Filosofia - Danilo Marcondes']
  };

  const subjectBooks = books[subject] || books['Matem√°tica'];
  return subjectBooks[Math.floor(Math.random() * subjectBooks.length)];
};

/**
 * Test Gemini API connection
 */
export const testGeminiConnection = async (): Promise<boolean> => {
  try {
    if (!API_KEY || API_KEY === 'your-gemini-api-key') {
      return false;
    }

    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: 'Teste de conex√£o. Responda apenas "OK".' }] }],
      generationConfig: {
        temperature: 0.1,
        maxOutputTokens: 10,
      },
    });
    
    const response = await result.response;
    const text = response.text();
    return text.toLowerCase().includes('ok');
  } catch (error) {
    console.error('Gemini API connection test failed:', error);
    return false;
  }
};

/**
 * Get API status for debugging
 */
export const getGeminiStatus = () => {
  return {
    hasApiKey: !!API_KEY && API_KEY !== 'your-gemini-api-key',
    apiKey: API_KEY ? `${API_KEY.substring(0, 10)}...` : 'Not configured',
    model: 'gemini-1.5-flash'
  };
};